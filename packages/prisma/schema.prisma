// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  // imports       = "./zod-utils"
  relationModel = true
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  /// @zod.email()
  email     String
  role      UserRole @default(USER)

  repositoryAccesses RepositoryAccess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([email])
}

model RepositoryAccess {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([repositoryId])
}

model Repository {
  id         String  @id @default(cuid())
  name       String
  fullName   String
  ownerLogin String
  isMonorepo Boolean @default(false)
  isIndexed  Boolean
  isPublic   Boolean

  userAccesses    RepositoryAccess[]
  dependencyFiles DependencyFile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fullName])
}

model DependencyFile {
  id   String  @id @default(cuid())
  name String  @default("package.json")
  path String?

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])

  dependencies Dependency[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([repositoryId])
}

model Dependency {
  id        String         @id @default(cuid())
  fileId    String
  file      DependencyFile @relation(fields: [fileId], references: [id])
  packageId String
  package   Package        @relation(fields: [packageId], references: [id])
  versionId String
  version   PackageVersion @relation(fields: [versionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([fileId])
  @@index([packageId])
  @@index([versionId])
}

model Package {
  id   String @id @default(cuid())
  name String

  latestCheckDate  DateTime
  latestUpdateDate DateTime

  githubLink String?
  homeLink   String?

  dependencies Dependency[]
  versions     PackageVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model PackageVersion {
  id      String @id @default(cuid())
  name    String
  details String

  packageId String
  package   Package @relation(fields: [packageId], references: [id])

  isLatestVersion Boolean

  githubCommitSha String?
  releaseDate     DateTime

  dependencies Dependency[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([packageId])
}
